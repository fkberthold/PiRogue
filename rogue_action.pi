import utilities.

/* PREDICATE FACT: input_action
 * Align user inputs to the intended action.
 *
 * PARAMETERS
 * Character: char
 *   The user input from a keyboard.
 * Action: structure
 *   The resulting action. Current valid actions include:
 *      move(Direction): Move the player in a given Direction.
 */
index (+,-)
input_action('k', move(n)).
input_action('u', move(ne)).
input_action('l', move(e)).
input_action('n', move(se)).
input_action('j', move(s)).
input_action('b', move(sw)).
input_action('h', move(w)).
input_action('y', move(nw)).

/* FUNCTION FACT: direction_transform
 * Given a direction and current coordinates,
 *   returns the new coordinates.
 * Note: I'd considered making this a reversable predicate, but
 *    Any solution I came up with was horribly inefficient, and
 *    this is a very frequently used function.
 *
 * PARAMETERS
 * Direction: atom
 *   The direction to move in: n, ne, e, se, s, sw, w, nw
 * Origin: $coord(X, Y)
 *   Coordinates to transform.
 * RETURN:
 *   Target: $coord(X, Y)
 *   The Coord shifted in the Direction given.
 */
direction_transform(n, coord(X, Y)) = new_struct(coord, [X, Y + 1]).
direction_transform(ne, coord(X, Y)) = new_struct(coord, [X + 1, Y + 1]).
direction_transform(e, coord(X, Y)) = new_struct(coord, [X + 1, Y]).
direction_transform(se, coord(X, Y)) = new_struct(coord, [X + 1, Y - 1]).
direction_transform(s, coord(X, Y)) = new_struct(coord, [X, Y - 1]).
direction_transform(sw, coord(X, Y)) = new_struct(coord, [X - 1, Y - 1]).
direction_transform(w, coord(X, Y)) = new_struct(coord, [X - 1, Y]).
direction_transform(nw, coord(X, Y)) = new_struct(coord, [X - 1, Y + 1]).

/* Predicate: on_floor
 * Determine if the given set of coordinates is on the floor somewhere
 *  in the current level.
 *
 * PARAMETERS
 * RoomList: list of $room
 *   The list of all of the rooms in the game.
 * Coord: $coord(X, Y)
 *   A set of coordinates.
 */
on_floor([], _) => false.
on_floor([Room|Rooms], coord(X, Y)) =>
    Room = $room($coord(LowerLeftX, LowerLeftY),$coord(UpperRightX, UpperRightY)),
    if (X > LowerLeftX, X < UpperRightX, Y > LowerLeftY, Y < UpperRightY) then
        true
    else
        on_floor(Rooms, $coord(X, Y))
    end.

/* Predicate: in_floor
 * Determine if the given set of coordinates is in a corridor somewhere
 *  in the current level.
 *
 * PARAMETERS
 * CorridorList: list of $corridor
 *   The list of all of the corridors in the game.
 * Coord: $coord(X, Y)
 *   A set of coordinates.
 */
in_corridor([], _) => false.
in_corridor([Corridor|Corridors], Coord) =>
    Room = $room($coord(LowerLeftX, LowerLeftY),$coord(UpperRightX, UpperRightY)),
    Corridor = $corridor(Start, End),
    if (on_line(Coord, Start, End)) then
        true
    else
        in_corridor(Corridors, Coord)
    end.

/* Predicate: open_space
 * Determine if the given set of coordinates is in a space that can be
 *  moved to.
 *
 * PARAMETERS
 * World: map
 *   The map of the world as it stands.
 * Point: $coord(X, Y)
 *  A set of coordinates.
 */
open_space(World, Point@coord(X, Y)) =>
    RoomList = World.get(rooms),
    CorridorList = World.get(corridors),
    (in_corridor(CorridorList, Point);on_floor(RoomList, Point)).

/* Predicate: clear_corner
 * Determine if the movement between two coordinates is diagonal
 *  and is crossing a non-passable space. For example, if the
 *  player is next to a wall, and trying to move diagonally
 *  into a door, or if the player is in a corridor and trying
 *  to move diagonally around a corner. This will be true if both
 *  diagonals are clear, and false otherwise.
 *
 * PARAMETERS
 * Start: $coord(X, Y)
 *   The start location of the player.
 * Target: $coord(X, Y)
 *   The target location of the player.
 * World: map
 *   The map of the world as it stands.
 */
clear_corner(Start@coord(StartX, StartY), Target@coord(TargetX, TargetY),
                World) =>
    Corner1 = $coord(StartX, TargetY),
    Corner2 = $coord(TargetX, StartY),
    open_space(World, Corner1),
    open_space(World, Corner2).

/* Function: do_action
 * Perform a transformation on the game state based on a given
 *   action. There's a bit more game logic in here than I'd like.
 *   I'd rather book keeping like which actions are possible be
 *   kept elsewhere.
 *
 * PARAMETERS
 * State: map
 *   The current game state.
 * Action: a struct
 *   A structure indicating what the current intended action is.
 * RETURN:
 * NewState: map
 *   The state after the action is performed.
 */
do_action(State, move(Direction)) = NewState,
    /* Move the player's character in a direction.
     */
    Location = State.get(world).get(player_position),
    NewLocation = direction_transform(Direction, Location),
    World = State.get(world),
    (open_space(World, NewLocation),
     clear_corner(Location, NewLocation, World)) =>
    State.get(world).put(player_position, NewLocation),
    NewState = State.
do_action(State, _) =
    /* Either the action is unrecognized, or a recognized
     *  action can't be performed.
     */
    State.